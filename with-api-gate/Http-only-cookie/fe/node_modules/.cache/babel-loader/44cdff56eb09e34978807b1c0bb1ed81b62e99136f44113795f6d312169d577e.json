{"ast":null,"code":"'use strict';\n\nconst {\n  normalizeIPv6,\n  normalizeIPv4,\n  removeDotSegments,\n  recomposeAuthority,\n  normalizeComponentEncoding\n} = require('./lib/utils');\nconst SCHEMES = require('./lib/schemes');\nfunction normalize(uri, options) {\n  if (typeof uri === 'string') {\n    uri = serialize(parse(uri, options), options);\n  } else if (typeof uri === 'object') {\n    uri = parse(serialize(uri, options), options);\n  }\n  return uri;\n}\nfunction resolve(baseURI, relativeURI, options) {\n  const schemelessOptions = Object.assign({\n    scheme: 'null'\n  }, options);\n  const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true);\n  return serialize(resolved, {\n    ...schemelessOptions,\n    skipEscape: true\n  });\n}\nfunction resolveComponents(base, relative, options, skipNormalization) {\n  const target = {};\n  if (!skipNormalization) {\n    base = parse(serialize(base, options), options); // normalize base components\n    relative = parse(serialize(relative, options), options); // normalize relative components\n  }\n  options = options || {};\n  if (!options.tolerant && relative.scheme) {\n    target.scheme = relative.scheme;\n    // target.authority = relative.authority;\n    target.userinfo = relative.userinfo;\n    target.host = relative.host;\n    target.port = relative.port;\n    target.path = removeDotSegments(relative.path || '');\n    target.query = relative.query;\n  } else {\n    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n      // target.authority = relative.authority;\n      target.userinfo = relative.userinfo;\n      target.host = relative.host;\n      target.port = relative.port;\n      target.path = removeDotSegments(relative.path || '');\n      target.query = relative.query;\n    } else {\n      if (!relative.path) {\n        target.path = base.path;\n        if (relative.query !== undefined) {\n          target.query = relative.query;\n        } else {\n          target.query = base.query;\n        }\n      } else {\n        if (relative.path.charAt(0) === '/') {\n          target.path = removeDotSegments(relative.path);\n        } else {\n          if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n            target.path = '/' + relative.path;\n          } else if (!base.path) {\n            target.path = relative.path;\n          } else {\n            target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path;\n          }\n          target.path = removeDotSegments(target.path);\n        }\n        target.query = relative.query;\n      }\n      // target.authority = base.authority;\n      target.userinfo = base.userinfo;\n      target.host = base.host;\n      target.port = base.port;\n    }\n    target.scheme = base.scheme;\n  }\n  target.fragment = relative.fragment;\n  return target;\n}\nfunction equal(uriA, uriB, options) {\n  if (typeof uriA === 'string') {\n    uriA = unescape(uriA);\n    uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), {\n      ...options,\n      skipEscape: true\n    });\n  } else if (typeof uriA === 'object') {\n    uriA = serialize(normalizeComponentEncoding(uriA, true), {\n      ...options,\n      skipEscape: true\n    });\n  }\n  if (typeof uriB === 'string') {\n    uriB = unescape(uriB);\n    uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), {\n      ...options,\n      skipEscape: true\n    });\n  } else if (typeof uriB === 'object') {\n    uriB = serialize(normalizeComponentEncoding(uriB, true), {\n      ...options,\n      skipEscape: true\n    });\n  }\n  return uriA.toLowerCase() === uriB.toLowerCase();\n}\nfunction serialize(cmpts, opts) {\n  const components = {\n    host: cmpts.host,\n    scheme: cmpts.scheme,\n    userinfo: cmpts.userinfo,\n    port: cmpts.port,\n    path: cmpts.path,\n    query: cmpts.query,\n    nid: cmpts.nid,\n    nss: cmpts.nss,\n    uuid: cmpts.uuid,\n    fragment: cmpts.fragment,\n    reference: cmpts.reference,\n    resourceName: cmpts.resourceName,\n    secure: cmpts.secure,\n    error: ''\n  };\n  const options = Object.assign({}, opts);\n  const uriTokens = [];\n\n  // find scheme handler\n  const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()];\n\n  // perform scheme specific serialization\n  if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n  if (components.path !== undefined) {\n    if (!options.skipEscape) {\n      components.path = escape(components.path);\n      if (components.scheme !== undefined) {\n        components.path = components.path.split('%3A').join(':');\n      }\n    } else {\n      components.path = unescape(components.path);\n    }\n  }\n  if (options.reference !== 'suffix' && components.scheme) {\n    uriTokens.push(components.scheme);\n    uriTokens.push(':');\n  }\n  const authority = recomposeAuthority(components, options);\n  if (authority !== undefined) {\n    if (options.reference !== 'suffix') {\n      uriTokens.push('//');\n    }\n    uriTokens.push(authority);\n    if (components.path && components.path.charAt(0) !== '/') {\n      uriTokens.push('/');\n    }\n  }\n  if (components.path !== undefined) {\n    let s = components.path;\n    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n      s = removeDotSegments(s);\n    }\n    if (authority === undefined) {\n      s = s.replace(/^\\/\\//u, '/%2F'); // don't allow the path to start with \"//\"\n    }\n    uriTokens.push(s);\n  }\n  if (components.query !== undefined) {\n    uriTokens.push('?');\n    uriTokens.push(components.query);\n  }\n  if (components.fragment !== undefined) {\n    uriTokens.push('#');\n    uriTokens.push(components.fragment);\n  }\n  return uriTokens.join('');\n}\nconst hexLookUp = Array.from({\n  length: 127\n}, (v, k) => /[^!\"$&'()*+,\\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)));\nfunction nonSimpleDomain(value) {\n  let code = 0;\n  for (let i = 0, len = value.length; i < len; ++i) {\n    code = value.charCodeAt(i);\n    if (code > 126 || hexLookUp[code]) {\n      return true;\n    }\n  }\n  return false;\n}\nconst URI_PARSE = /^(?:([^#/:?]+):)?(?:\\/\\/((?:([^#/?@]*)@)?(\\[[^#/?\\]]+\\]|[^#/:?]*)(?::(\\d*))?))?([^#?]*)(?:\\?([^#]*))?(?:#((?:.|[\\n\\r])*))?/u;\nfunction parse(uri, opts) {\n  const options = Object.assign({}, opts);\n  const parsed = {\n    scheme: undefined,\n    userinfo: undefined,\n    host: '',\n    port: undefined,\n    path: '',\n    query: undefined,\n    fragment: undefined\n  };\n  const gotEncoding = uri.indexOf('%') !== -1;\n  let isIP = false;\n  if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri;\n  const matches = uri.match(URI_PARSE);\n  if (matches) {\n    // store each component\n    parsed.scheme = matches[1];\n    parsed.userinfo = matches[3];\n    parsed.host = matches[4];\n    parsed.port = parseInt(matches[5], 10);\n    parsed.path = matches[6] || '';\n    parsed.query = matches[7];\n    parsed.fragment = matches[8];\n\n    // fix port number\n    if (isNaN(parsed.port)) {\n      parsed.port = matches[5];\n    }\n    if (parsed.host) {\n      const ipv4result = normalizeIPv4(parsed.host);\n      if (ipv4result.isIPV4 === false) {\n        const ipv6result = normalizeIPv6(ipv4result.host, {\n          isIPV4: false\n        });\n        parsed.host = ipv6result.host.toLowerCase();\n        isIP = ipv6result.isIPV6;\n      } else {\n        parsed.host = ipv4result.host;\n        isIP = true;\n      }\n    }\n    if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && !parsed.path && parsed.query === undefined) {\n      parsed.reference = 'same-document';\n    } else if (parsed.scheme === undefined) {\n      parsed.reference = 'relative';\n    } else if (parsed.fragment === undefined) {\n      parsed.reference = 'absolute';\n    } else {\n      parsed.reference = 'uri';\n    }\n\n    // check for reference errors\n    if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {\n      parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.';\n    }\n\n    // find scheme handler\n    const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()];\n\n    // check if scheme can't handle IRIs\n    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n      // if host component is a domain name\n      if (parsed.host && (options.domainHost || schemeHandler && schemeHandler.domainHost) && isIP === false && nonSimpleDomain(parsed.host)) {\n        // convert Unicode IDN -> ASCII IDN\n        try {\n          parsed.host = URL.domainToASCII(parsed.host.toLowerCase());\n        } catch (e) {\n          parsed.error = parsed.error || \"Host's domain name can not be converted to ASCII: \" + e;\n        }\n      }\n      // convert IRI -> URI\n    }\n    if (!schemeHandler || schemeHandler && !schemeHandler.skipNormalize) {\n      if (gotEncoding && parsed.scheme !== undefined) {\n        parsed.scheme = unescape(parsed.scheme);\n      }\n      if (gotEncoding && parsed.userinfo !== undefined) {\n        parsed.userinfo = unescape(parsed.userinfo);\n      }\n      if (gotEncoding && parsed.host !== undefined) {\n        parsed.host = unescape(parsed.host);\n      }\n      if (parsed.path !== undefined && parsed.path.length) {\n        parsed.path = escape(unescape(parsed.path));\n      }\n      if (parsed.fragment !== undefined && parsed.fragment.length) {\n        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment));\n      }\n    }\n\n    // perform scheme specific parsing\n    if (schemeHandler && schemeHandler.parse) {\n      schemeHandler.parse(parsed, options);\n    }\n  } else {\n    parsed.error = parsed.error || 'URI can not be parsed.';\n  }\n  return parsed;\n}\nconst fastUri = {\n  SCHEMES,\n  normalize,\n  resolve,\n  resolveComponents,\n  equal,\n  serialize,\n  parse\n};\nmodule.exports = fastUri;\nmodule.exports.default = fastUri;\nmodule.exports.fastUri = fastUri;","map":{"version":3,"names":["normalizeIPv6","normalizeIPv4","removeDotSegments","recomposeAuthority","normalizeComponentEncoding","require","SCHEMES","normalize","uri","options","serialize","parse","resolve","baseURI","relativeURI","schemelessOptions","Object","assign","scheme","resolved","resolveComponents","skipEscape","base","relative","skipNormalization","target","tolerant","userinfo","host","port","path","query","undefined","charAt","slice","lastIndexOf","fragment","equal","uriA","uriB","unescape","toLowerCase","cmpts","opts","components","nid","nss","uuid","reference","resourceName","secure","error","uriTokens","schemeHandler","escape","split","join","push","authority","s","absolutePath","replace","hexLookUp","Array","from","length","v","k","test","String","fromCharCode","nonSimpleDomain","value","code","i","len","charCodeAt","URI_PARSE","parsed","gotEncoding","indexOf","isIP","matches","match","parseInt","isNaN","ipv4result","isIPV4","ipv6result","isIPV6","unicodeSupport","domainHost","URL","domainToASCII","e","skipNormalize","encodeURI","decodeURIComponent","fastUri","module","exports","default"],"sources":["/Users/mukunthan/Projects/htx/oath_test/Http-only-cookie/fe/node_modules/fast-uri/index.js"],"sourcesContent":["'use strict'\n\nconst { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require('./lib/utils')\nconst SCHEMES = require('./lib/schemes')\n\nfunction normalize (uri, options) {\n  if (typeof uri === 'string') {\n    uri = serialize(parse(uri, options), options)\n  } else if (typeof uri === 'object') {\n    uri = parse(serialize(uri, options), options)\n  }\n  return uri\n}\n\nfunction resolve (baseURI, relativeURI, options) {\n  const schemelessOptions = Object.assign({ scheme: 'null' }, options)\n  const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true)\n  return serialize(resolved, { ...schemelessOptions, skipEscape: true })\n}\n\nfunction resolveComponents (base, relative, options, skipNormalization) {\n  const target = {}\n  if (!skipNormalization) {\n    base = parse(serialize(base, options), options) // normalize base components\n    relative = parse(serialize(relative, options), options) // normalize relative components\n  }\n  options = options || {}\n\n  if (!options.tolerant && relative.scheme) {\n    target.scheme = relative.scheme\n    // target.authority = relative.authority;\n    target.userinfo = relative.userinfo\n    target.host = relative.host\n    target.port = relative.port\n    target.path = removeDotSegments(relative.path || '')\n    target.query = relative.query\n  } else {\n    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n      // target.authority = relative.authority;\n      target.userinfo = relative.userinfo\n      target.host = relative.host\n      target.port = relative.port\n      target.path = removeDotSegments(relative.path || '')\n      target.query = relative.query\n    } else {\n      if (!relative.path) {\n        target.path = base.path\n        if (relative.query !== undefined) {\n          target.query = relative.query\n        } else {\n          target.query = base.query\n        }\n      } else {\n        if (relative.path.charAt(0) === '/') {\n          target.path = removeDotSegments(relative.path)\n        } else {\n          if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n            target.path = '/' + relative.path\n          } else if (!base.path) {\n            target.path = relative.path\n          } else {\n            target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path\n          }\n          target.path = removeDotSegments(target.path)\n        }\n        target.query = relative.query\n      }\n      // target.authority = base.authority;\n      target.userinfo = base.userinfo\n      target.host = base.host\n      target.port = base.port\n    }\n    target.scheme = base.scheme\n  }\n\n  target.fragment = relative.fragment\n\n  return target\n}\n\nfunction equal (uriA, uriB, options) {\n  if (typeof uriA === 'string') {\n    uriA = unescape(uriA)\n    uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true })\n  } else if (typeof uriA === 'object') {\n    uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true })\n  }\n\n  if (typeof uriB === 'string') {\n    uriB = unescape(uriB)\n    uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true })\n  } else if (typeof uriB === 'object') {\n    uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true })\n  }\n\n  return uriA.toLowerCase() === uriB.toLowerCase()\n}\n\nfunction serialize (cmpts, opts) {\n  const components = {\n    host: cmpts.host,\n    scheme: cmpts.scheme,\n    userinfo: cmpts.userinfo,\n    port: cmpts.port,\n    path: cmpts.path,\n    query: cmpts.query,\n    nid: cmpts.nid,\n    nss: cmpts.nss,\n    uuid: cmpts.uuid,\n    fragment: cmpts.fragment,\n    reference: cmpts.reference,\n    resourceName: cmpts.resourceName,\n    secure: cmpts.secure,\n    error: ''\n  }\n  const options = Object.assign({}, opts)\n  const uriTokens = []\n\n  // find scheme handler\n  const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()]\n\n  // perform scheme specific serialization\n  if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options)\n\n  if (components.path !== undefined) {\n    if (!options.skipEscape) {\n      components.path = escape(components.path)\n\n      if (components.scheme !== undefined) {\n        components.path = components.path.split('%3A').join(':')\n      }\n    } else {\n      components.path = unescape(components.path)\n    }\n  }\n\n  if (options.reference !== 'suffix' && components.scheme) {\n    uriTokens.push(components.scheme)\n    uriTokens.push(':')\n  }\n\n  const authority = recomposeAuthority(components, options)\n  if (authority !== undefined) {\n    if (options.reference !== 'suffix') {\n      uriTokens.push('//')\n    }\n\n    uriTokens.push(authority)\n\n    if (components.path && components.path.charAt(0) !== '/') {\n      uriTokens.push('/')\n    }\n  }\n  if (components.path !== undefined) {\n    let s = components.path\n\n    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n      s = removeDotSegments(s)\n    }\n\n    if (authority === undefined) {\n      s = s.replace(/^\\/\\//u, '/%2F') // don't allow the path to start with \"//\"\n    }\n\n    uriTokens.push(s)\n  }\n\n  if (components.query !== undefined) {\n    uriTokens.push('?')\n    uriTokens.push(components.query)\n  }\n\n  if (components.fragment !== undefined) {\n    uriTokens.push('#')\n    uriTokens.push(components.fragment)\n  }\n  return uriTokens.join('')\n}\n\nconst hexLookUp = Array.from({ length: 127 }, (v, k) => /[^!\"$&'()*+,\\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)))\n\nfunction nonSimpleDomain (value) {\n  let code = 0\n  for (let i = 0, len = value.length; i < len; ++i) {\n    code = value.charCodeAt(i)\n    if (code > 126 || hexLookUp[code]) {\n      return true\n    }\n  }\n  return false\n}\n\nconst URI_PARSE = /^(?:([^#/:?]+):)?(?:\\/\\/((?:([^#/?@]*)@)?(\\[[^#/?\\]]+\\]|[^#/:?]*)(?::(\\d*))?))?([^#?]*)(?:\\?([^#]*))?(?:#((?:.|[\\n\\r])*))?/u\n\nfunction parse (uri, opts) {\n  const options = Object.assign({}, opts)\n  const parsed = {\n    scheme: undefined,\n    userinfo: undefined,\n    host: '',\n    port: undefined,\n    path: '',\n    query: undefined,\n    fragment: undefined\n  }\n  const gotEncoding = uri.indexOf('%') !== -1\n  let isIP = false\n  if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri\n\n  const matches = uri.match(URI_PARSE)\n\n  if (matches) {\n    // store each component\n    parsed.scheme = matches[1]\n    parsed.userinfo = matches[3]\n    parsed.host = matches[4]\n    parsed.port = parseInt(matches[5], 10)\n    parsed.path = matches[6] || ''\n    parsed.query = matches[7]\n    parsed.fragment = matches[8]\n\n    // fix port number\n    if (isNaN(parsed.port)) {\n      parsed.port = matches[5]\n    }\n    if (parsed.host) {\n      const ipv4result = normalizeIPv4(parsed.host)\n      if (ipv4result.isIPV4 === false) {\n        const ipv6result = normalizeIPv6(ipv4result.host, { isIPV4: false })\n        parsed.host = ipv6result.host.toLowerCase()\n        isIP = ipv6result.isIPV6\n      } else {\n        parsed.host = ipv4result.host\n        isIP = true\n      }\n    }\n    if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && !parsed.path && parsed.query === undefined) {\n      parsed.reference = 'same-document'\n    } else if (parsed.scheme === undefined) {\n      parsed.reference = 'relative'\n    } else if (parsed.fragment === undefined) {\n      parsed.reference = 'absolute'\n    } else {\n      parsed.reference = 'uri'\n    }\n\n    // check for reference errors\n    if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {\n      parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.'\n    }\n\n    // find scheme handler\n    const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()]\n\n    // check if scheme can't handle IRIs\n    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n      // if host component is a domain name\n      if (parsed.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost)) && isIP === false && nonSimpleDomain(parsed.host)) {\n        // convert Unicode IDN -> ASCII IDN\n        try {\n          parsed.host = URL.domainToASCII(parsed.host.toLowerCase())\n        } catch (e) {\n          parsed.error = parsed.error || \"Host's domain name can not be converted to ASCII: \" + e\n        }\n      }\n      // convert IRI -> URI\n    }\n\n    if (!schemeHandler || (schemeHandler && !schemeHandler.skipNormalize)) {\n      if (gotEncoding && parsed.scheme !== undefined) {\n        parsed.scheme = unescape(parsed.scheme)\n      }\n      if (gotEncoding && parsed.userinfo !== undefined) {\n        parsed.userinfo = unescape(parsed.userinfo)\n      }\n      if (gotEncoding && parsed.host !== undefined) {\n        parsed.host = unescape(parsed.host)\n      }\n      if (parsed.path !== undefined && parsed.path.length) {\n        parsed.path = escape(unescape(parsed.path))\n      }\n      if (parsed.fragment !== undefined && parsed.fragment.length) {\n        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment))\n      }\n    }\n\n    // perform scheme specific parsing\n    if (schemeHandler && schemeHandler.parse) {\n      schemeHandler.parse(parsed, options)\n    }\n  } else {\n    parsed.error = parsed.error || 'URI can not be parsed.'\n  }\n  return parsed\n}\n\nconst fastUri = {\n  SCHEMES,\n  normalize,\n  resolve,\n  resolveComponents,\n  equal,\n  serialize,\n  parse\n}\n\nmodule.exports = fastUri\nmodule.exports.default = fastUri\nmodule.exports.fastUri = fastUri\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}